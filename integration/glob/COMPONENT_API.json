{
  "total": 1,
  "components": [
    {
      "moduleName": "Button",
      "filePath": "src/button/Button.svelte",
      "props": [
        {
          "name": "type",
          "kind": "let",
          "type": "string",
          "value": "\"button2\"",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        },
        {
          "name": "primary",
          "kind": "let",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": false,
          "reactive": false
        }
      ],
      "moduleExports": [
        {
          "name": "tree",
          "kind": "const",
          "type": "boolean",
          "value": "false",
          "isFunction": false,
          "isFunctionDeclaration": false,
          "constant": true,
          "reactive": false
        },
        {
          "name": "computeTreeLeafDepth",
          "kind": "function",
          "type": "() => any",
          "value": "() => {     let depth = 0;     if (node == null) return depth;     let parentNode = node.parentNode;     while (parentNode != null && parentNode.getAttribute(\"role\") !== \"tree\") {       parentNode = parentNode.parentNode;       if (parentNode.tagName === \"LI\") depth++;     }     return depth;   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "constant": false,
          "reactive": false
        },
        {
          "name": "findParentTreeNode",
          "kind": "function",
          "description": "Finds the nearest parent tree node",
          "type": "(node: HTMLElement) => null | HTMLElement",
          "value": "() => {     if (node.classList.contains(\"bx--tree-parent-node\")) return node;     if (node.classList.contains(\"bx--tree\")) return null;     return findParentTreeNode(node.parentNode);   }",
          "isFunction": true,
          "isFunctionDeclaration": true,
          "constant": false,
          "reactive": false
        }
      ],
      "slots": [
        {
          "name": "__default__",
          "default": true,
          "fallback": "Click me",
          "slot_props": "{}"
        }
      ],
      "events": [{ "type": "forwarded", "name": "click", "element": "button" }],
      "typedefs": [],
      "rest_props": { "type": "Element", "name": "button" }
    }
  ]
}
